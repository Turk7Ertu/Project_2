{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a2004ef7-4a57-4725-94b2-092171e3603c",
   "metadata": {},
   "source": [
    "### After cleaning the 3 datasets in different tab (cost_of_living_df, ds_salaries_df, levels_salary_DS) I load those cleaned version of the datasets into this segment, including country codes. I will now start doing the analysing the datas but first I will merge 3 of these datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "190f285f-e68d-4f0f-9775-c5e2a27b32f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "33f29212-43ba-4fe0-bef3-08155ea3cf03",
   "metadata": {},
   "outputs": [],
   "source": [
    "cost_of_living_df = pd.read_csv(\"/Users/ertuboston/Documents/Data_Science_Merrimack/DSE5002/PROJECT_2/DATA/clean_cost_of_living_df.csv\")\n",
    "\n",
    "ds_salaries_df = pd.read_csv(\"/Users/ertuboston/Documents/Data_Science_Merrimack/DSE5002/PROJECT_2/DATA/clean_ds_salaries_df.csv\")\n",
    "\n",
    "levels_salary_DS = pd.read_csv(\"/Users/ertuboston/Documents/Data_Science_Merrimack/DSE5002/PROJECT_2/DATA/clean_levels_salary_DS.csv\")\n",
    "\n",
    "country_codes_df = pd.read_csv(\"/Users/ertuboston/Documents/Data_Science_Merrimack/DSE5002/PROJECT_2/DATA/country_codes - Sheet1.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "7b1f644c-ef79-46a1-a9ce-51ddbe512e26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Cost of Living Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Cost of Living Plus Rent Index</th>\n",
       "      <th>Groceries Index</th>\n",
       "      <th>Restaurant Price Index</th>\n",
       "      <th>Local Purchasing Power Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hamilton</td>\n",
       "      <td>Bermuda</td>\n",
       "      <td>149.02</td>\n",
       "      <td>96.10</td>\n",
       "      <td>124.22</td>\n",
       "      <td>157.89</td>\n",
       "      <td>155.22</td>\n",
       "      <td>79.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>128.13</td>\n",
       "      <td>72.12</td>\n",
       "      <td>101.87</td>\n",
       "      <td>132.61</td>\n",
       "      <td>130.93</td>\n",
       "      <td>143.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lugano</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>123.99</td>\n",
       "      <td>44.99</td>\n",
       "      <td>86.96</td>\n",
       "      <td>129.17</td>\n",
       "      <td>119.80</td>\n",
       "      <td>111.96</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       City      Country  Cost of Living Index  Rent Index  \\\n",
       "0  Hamilton      Bermuda                149.02       96.10   \n",
       "1    Zurich  Switzerland                131.24       69.26   \n",
       "2     Basel  Switzerland                130.93       49.38   \n",
       "3       Zug  Switzerland                128.13       72.12   \n",
       "4    Lugano  Switzerland                123.99       44.99   \n",
       "\n",
       "   Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n",
       "0                          124.22           157.89                  155.22   \n",
       "1                          102.19           136.14                  132.52   \n",
       "2                           92.70           137.07                  130.95   \n",
       "3                          101.87           132.61                  130.93   \n",
       "4                           86.96           129.17                  119.80   \n",
       "\n",
       "   Local Purchasing Power Index  \n",
       "0                         79.43  \n",
       "1                        129.79  \n",
       "2                        111.53  \n",
       "3                        143.40  \n",
       "4                        111.96  "
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_of_living_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "08375bd6-6d0b-48ea-96c7-c33d4b6e6ca0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>experience_level</th>\n",
       "      <th>employment_type</th>\n",
       "      <th>job_title</th>\n",
       "      <th>salary_in_usd</th>\n",
       "      <th>employee_residence</th>\n",
       "      <th>company_location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>MI</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>79833</td>\n",
       "      <td>DE</td>\n",
       "      <td>DE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020</td>\n",
       "      <td>SE</td>\n",
       "      <td>FT</td>\n",
       "      <td>Lead Data Scientist</td>\n",
       "      <td>190000</td>\n",
       "      <td>US</td>\n",
       "      <td>US</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020</td>\n",
       "      <td>MI</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>35735</td>\n",
       "      <td>HU</td>\n",
       "      <td>HU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020</td>\n",
       "      <td>EN</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>51321</td>\n",
       "      <td>FR</td>\n",
       "      <td>FR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020</td>\n",
       "      <td>MI</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>40481</td>\n",
       "      <td>IN</td>\n",
       "      <td>IN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year experience_level employment_type            job_title  \\\n",
       "0       2020               MI              FT       Data Scientist   \n",
       "1       2020               SE              FT  Lead Data Scientist   \n",
       "2       2020               MI              FT       Data Scientist   \n",
       "3       2020               EN              FT       Data Scientist   \n",
       "4       2020               MI              FT       Data Scientist   \n",
       "\n",
       "   salary_in_usd employee_residence company_location  \n",
       "0          79833                 DE               DE  \n",
       "1         190000                 US               US  \n",
       "2          35735                 HU               HU  \n",
       "3          51321                 FR               FR  \n",
       "4          40481                 IN               IN  "
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_salaries_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "02775f8c-b642-432e-b5f7-8d23ceb6775d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company</th>\n",
       "      <th>title</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>basesalary</th>\n",
       "      <th>stockgrantvalue</th>\n",
       "      <th>bonus</th>\n",
       "      <th>cityid</th>\n",
       "      <th>dmaid</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>170000</td>\n",
       "      <td>170000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7419</td>\n",
       "      <td>807.0</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>CA</td>\n",
       "      <td>US</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Facebook</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>205000</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>15000.0</td>\n",
       "      <td>7300</td>\n",
       "      <td>807.0</td>\n",
       "      <td>Menlo Park</td>\n",
       "      <td>CA</td>\n",
       "      <td>US</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Microsoft</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>220000</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>10000.0</td>\n",
       "      <td>11470</td>\n",
       "      <td>819.0</td>\n",
       "      <td>Bellevue</td>\n",
       "      <td>WA</td>\n",
       "      <td>US</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PayPal</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>216000</td>\n",
       "      <td>160000.0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>7422</td>\n",
       "      <td>807.0</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>CA</td>\n",
       "      <td>US</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Amazon</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>185000</td>\n",
       "      <td>185000.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8821</td>\n",
       "      <td>506.0</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>MA</td>\n",
       "      <td>US</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     company           title  totalyearlycompensation  basesalary  \\\n",
       "0     Google  Data Scientist                   170000    170000.0   \n",
       "1   Facebook  Data Scientist                   205000    150000.0   \n",
       "2  Microsoft  Data Scientist                   220000    150000.0   \n",
       "3     PayPal  Data Scientist                   216000    160000.0   \n",
       "4     Amazon  Data Scientist                   185000    185000.0   \n",
       "\n",
       "   stockgrantvalue    bonus  cityid  dmaid           city state country  \n",
       "0              0.0      0.0    7419  807.0  San Francisco    CA      US  \n",
       "1          40000.0  15000.0    7300  807.0     Menlo Park    CA      US  \n",
       "2          60000.0  10000.0   11470  819.0       Bellevue    WA      US  \n",
       "3          40000.0  16000.0    7422  807.0       San Jose    CA      US  \n",
       "4           5000.0      0.0    8821  506.0      Cambridge    MA      US  "
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "levels_salary_DS.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "75337fe5-5eaa-4de4-b503-7cc319a6389c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>Alpha-3 code</th>\n",
       "      <th>Numeric</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AF</td>\n",
       "      <td>AFG</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>AL</td>\n",
       "      <td>ALB</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>DZ</td>\n",
       "      <td>DZA</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>American Samoa</td>\n",
       "      <td>AS</td>\n",
       "      <td>ASM</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Andorra</td>\n",
       "      <td>AD</td>\n",
       "      <td>AND</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Country Alpha-2 code Alpha-3 code  Numeric\n",
       "0     Afghanistan           AF          AFG        4\n",
       "1         Albania           AL          ALB        8\n",
       "2         Algeria           DZ          DZA       12\n",
       "3  American Samoa           AS          ASM       16\n",
       "4         Andorra           AD          AND       20"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_codes_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "0d324119-9235-4198-b871-c2ed452ba03c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Cost of Living Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Cost of Living Plus Rent Index</th>\n",
       "      <th>Groceries Index</th>\n",
       "      <th>Restaurant Price Index</th>\n",
       "      <th>Local Purchasing Power Index</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>Alpha-3 code</th>\n",
       "      <th>Numeric</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hamilton</td>\n",
       "      <td>Bermuda</td>\n",
       "      <td>149.02</td>\n",
       "      <td>96.10</td>\n",
       "      <td>124.22</td>\n",
       "      <td>157.89</td>\n",
       "      <td>155.22</td>\n",
       "      <td>79.43</td>\n",
       "      <td>BM</td>\n",
       "      <td>BMU</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>CHE</td>\n",
       "      <td>756.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>CHE</td>\n",
       "      <td>756.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>128.13</td>\n",
       "      <td>72.12</td>\n",
       "      <td>101.87</td>\n",
       "      <td>132.61</td>\n",
       "      <td>130.93</td>\n",
       "      <td>143.40</td>\n",
       "      <td>CH</td>\n",
       "      <td>CHE</td>\n",
       "      <td>756.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lugano</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>123.99</td>\n",
       "      <td>44.99</td>\n",
       "      <td>86.96</td>\n",
       "      <td>129.17</td>\n",
       "      <td>119.80</td>\n",
       "      <td>111.96</td>\n",
       "      <td>CH</td>\n",
       "      <td>CHE</td>\n",
       "      <td>756.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       City      Country  Cost of Living Index  Rent Index  \\\n",
       "0  Hamilton      Bermuda                149.02       96.10   \n",
       "1    Zurich  Switzerland                131.24       69.26   \n",
       "2     Basel  Switzerland                130.93       49.38   \n",
       "3       Zug  Switzerland                128.13       72.12   \n",
       "4    Lugano  Switzerland                123.99       44.99   \n",
       "\n",
       "   Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n",
       "0                          124.22           157.89                  155.22   \n",
       "1                          102.19           136.14                  132.52   \n",
       "2                           92.70           137.07                  130.95   \n",
       "3                          101.87           132.61                  130.93   \n",
       "4                           86.96           129.17                  119.80   \n",
       "\n",
       "   Local Purchasing Power Index Alpha-2 code Alpha-3 code  Numeric  \n",
       "0                         79.43           BM          BMU     60.0  \n",
       "1                        129.79           CH          CHE    756.0  \n",
       "2                        111.53           CH          CHE    756.0  \n",
       "3                        143.40           CH          CHE    756.0  \n",
       "4                        111.96           CH          CHE    756.0  "
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### I will merge two datasets first, country_codes_df and cost_of_living_df. \n",
    "### I assume I would need this merging to be able to merge one of other datasets to calculate the spendings.\n",
    "\n",
    "merged_data = pd.merge( cost_of_living_df, country_codes_df, on = 'Country', how = 'left')\n",
    "merged_data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "cb933b72-9764-4c0e-9f80-cf5ac315b92a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Cost of Living Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Cost of Living Plus Rent Index</th>\n",
       "      <th>Groceries Index</th>\n",
       "      <th>Restaurant Price Index</th>\n",
       "      <th>Local Purchasing Power Index</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>Alpha-3 code</th>\n",
       "      <th>...</th>\n",
       "      <th>title</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>basesalary</th>\n",
       "      <th>stockgrantvalue</th>\n",
       "      <th>bonus</th>\n",
       "      <th>cityid</th>\n",
       "      <th>dmaid</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hamilton</td>\n",
       "      <td>Bermuda</td>\n",
       "      <td>149.02</td>\n",
       "      <td>96.10</td>\n",
       "      <td>124.22</td>\n",
       "      <td>157.89</td>\n",
       "      <td>155.22</td>\n",
       "      <td>79.43</td>\n",
       "      <td>BM</td>\n",
       "      <td>BMU</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>CHE</td>\n",
       "      <td>...</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>6736.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Zurich</td>\n",
       "      <td>ZH</td>\n",
       "      <td>CH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>CHE</td>\n",
       "      <td>...</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13139.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Basel</td>\n",
       "      <td>BS</td>\n",
       "      <td>CH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>CHE</td>\n",
       "      <td>...</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>6736.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Zurich</td>\n",
       "      <td>ZH</td>\n",
       "      <td>CH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>CHE</td>\n",
       "      <td>...</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13139.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Basel</td>\n",
       "      <td>BS</td>\n",
       "      <td>CH</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       City      Country  Cost of Living Index  Rent Index  \\\n",
       "0  Hamilton      Bermuda                149.02       96.10   \n",
       "1    Zurich  Switzerland                131.24       69.26   \n",
       "2    Zurich  Switzerland                131.24       69.26   \n",
       "3     Basel  Switzerland                130.93       49.38   \n",
       "4     Basel  Switzerland                130.93       49.38   \n",
       "\n",
       "   Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n",
       "0                          124.22           157.89                  155.22   \n",
       "1                          102.19           136.14                  132.52   \n",
       "2                          102.19           136.14                  132.52   \n",
       "3                           92.70           137.07                  130.95   \n",
       "4                           92.70           137.07                  130.95   \n",
       "\n",
       "   Local Purchasing Power Index Alpha-2 code Alpha-3 code  ...  \\\n",
       "0                         79.43           BM          BMU  ...   \n",
       "1                        129.79           CH          CHE  ...   \n",
       "2                        129.79           CH          CHE  ...   \n",
       "3                        111.53           CH          CHE  ...   \n",
       "4                        111.53           CH          CHE  ...   \n",
       "\n",
       "            title totalyearlycompensation basesalary  stockgrantvalue  \\\n",
       "0             NaN                     NaN        NaN              NaN   \n",
       "1  Data Scientist                345000.0   195000.0         120000.0   \n",
       "2  Data Scientist                 94000.0    94000.0              0.0   \n",
       "3  Data Scientist                345000.0   195000.0         120000.0   \n",
       "4  Data Scientist                 94000.0    94000.0              0.0   \n",
       "\n",
       "     bonus   cityid  dmaid    city  state country  \n",
       "0      NaN      NaN    NaN     NaN    NaN     NaN  \n",
       "1  30000.0   6736.0    0.0  Zurich     ZH      CH  \n",
       "2      0.0  13139.0    0.0   Basel     BS      CH  \n",
       "3  30000.0   6736.0    0.0  Zurich     ZH      CH  \n",
       "4      0.0  13139.0    0.0   Basel     BS      CH  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 322,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Now we can merge the merged data with levels_salary_DS to keep salaries and cost indexes in the same data.\n",
    "\n",
    "merged_salary_and_cost = pd.merge(merged_data, levels_salary_DS, left_on='Alpha-2 code', right_on='country', how = 'left')\n",
    "merged_salary_and_cost.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "288bde00-9562-45a2-91f2-ed0db8b4ddc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['City', 'Country', 'Cost of Living Index', 'Rent Index',\n",
      "       'Cost of Living Plus Rent Index', 'Groceries Index',\n",
      "       'Restaurant Price Index', 'Local Purchasing Power Index',\n",
      "       'Alpha-2 code', 'Alpha-3 code', 'Numeric', 'company', 'title',\n",
      "       'totalyearlycompensation', 'basesalary', 'stockgrantvalue', 'bonus',\n",
      "       'cityid', 'dmaid', 'city', 'state', 'country'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(merged_salary_and_cost.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "id": "3097f1fc-769a-464d-a0ed-fe8669358fef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Cost of Living Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Cost of Living Plus Rent Index</th>\n",
       "      <th>Groceries Index</th>\n",
       "      <th>Restaurant Price Index</th>\n",
       "      <th>Local Purchasing Power Index</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>company</th>\n",
       "      <th>title</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>basesalary</th>\n",
       "      <th>stockgrantvalue</th>\n",
       "      <th>bonus</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hamilton</td>\n",
       "      <td>Bermuda</td>\n",
       "      <td>149.02</td>\n",
       "      <td>96.10</td>\n",
       "      <td>124.22</td>\n",
       "      <td>157.89</td>\n",
       "      <td>155.22</td>\n",
       "      <td>79.43</td>\n",
       "      <td>BM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>Roche</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>Roche</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>17000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5575</th>\n",
       "      <td>Karachi</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>20.75</td>\n",
       "      <td>4.84</td>\n",
       "      <td>13.29</td>\n",
       "      <td>18.48</td>\n",
       "      <td>15.21</td>\n",
       "      <td>29.16</td>\n",
       "      <td>PK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5576</th>\n",
       "      <td>Rawalpindi</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>20.52</td>\n",
       "      <td>4.78</td>\n",
       "      <td>13.14</td>\n",
       "      <td>18.51</td>\n",
       "      <td>16.18</td>\n",
       "      <td>22.91</td>\n",
       "      <td>PK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5577</th>\n",
       "      <td>Multan</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>18.68</td>\n",
       "      <td>2.94</td>\n",
       "      <td>11.30</td>\n",
       "      <td>18.37</td>\n",
       "      <td>11.80</td>\n",
       "      <td>25.09</td>\n",
       "      <td>PK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5578</th>\n",
       "      <td>Peshawar</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>18.55</td>\n",
       "      <td>2.37</td>\n",
       "      <td>10.97</td>\n",
       "      <td>16.62</td>\n",
       "      <td>14.39</td>\n",
       "      <td>26.00</td>\n",
       "      <td>PK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5579 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            City      Country  Cost of Living Index  Rent Index  \\\n",
       "0       Hamilton      Bermuda                149.02       96.10   \n",
       "1         Zurich  Switzerland                131.24       69.26   \n",
       "2         Zurich  Switzerland                131.24       69.26   \n",
       "3          Basel  Switzerland                130.93       49.38   \n",
       "4          Basel  Switzerland                130.93       49.38   \n",
       "...          ...          ...                   ...         ...   \n",
       "5574      Kanpur        India                 20.79        3.60   \n",
       "5575     Karachi     Pakistan                 20.75        4.84   \n",
       "5576  Rawalpindi     Pakistan                 20.52        4.78   \n",
       "5577      Multan     Pakistan                 18.68        2.94   \n",
       "5578    Peshawar     Pakistan                 18.55        2.37   \n",
       "\n",
       "      Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n",
       "0                             124.22           157.89                  155.22   \n",
       "1                             102.19           136.14                  132.52   \n",
       "2                             102.19           136.14                  132.52   \n",
       "3                              92.70           137.07                  130.95   \n",
       "4                              92.70           137.07                  130.95   \n",
       "...                              ...              ...                     ...   \n",
       "5574                           12.73            22.19                   13.31   \n",
       "5575                           13.29            18.48                   15.21   \n",
       "5576                           13.14            18.51                   16.18   \n",
       "5577                           11.30            18.37                   11.80   \n",
       "5578                           10.97            16.62                   14.39   \n",
       "\n",
       "      Local Purchasing Power Index Alpha-2 code    company           title  \\\n",
       "0                            79.43           BM        NaN             NaN   \n",
       "1                           129.79           CH     Google  Data Scientist   \n",
       "2                           129.79           CH      Roche  Data Scientist   \n",
       "3                           111.53           CH     Google  Data Scientist   \n",
       "4                           111.53           CH      Roche  Data Scientist   \n",
       "...                            ...          ...        ...             ...   \n",
       "5574                         38.83           IN  Accenture  Data Scientist   \n",
       "5575                         29.16           PK        NaN             NaN   \n",
       "5576                         22.91           PK        NaN             NaN   \n",
       "5577                         25.09           PK        NaN             NaN   \n",
       "5578                         26.00           PK        NaN             NaN   \n",
       "\n",
       "      totalyearlycompensation  basesalary  stockgrantvalue    bonus  \n",
       "0                         NaN         NaN              NaN      NaN  \n",
       "1                    345000.0    195000.0         120000.0  30000.0  \n",
       "2                     94000.0     94000.0              0.0      0.0  \n",
       "3                    345000.0    195000.0         120000.0  30000.0  \n",
       "4                     94000.0     94000.0              0.0      0.0  \n",
       "...                       ...         ...              ...      ...  \n",
       "5574                  20000.0     17000.0              0.0   3000.0  \n",
       "5575                      NaN         NaN              NaN      NaN  \n",
       "5576                      NaN         NaN              NaN      NaN  \n",
       "5577                      NaN         NaN              NaN      NaN  \n",
       "5578                      NaN         NaN              NaN      NaN  \n",
       "\n",
       "[5579 rows x 15 columns]"
      ]
     },
     "execution_count": 326,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### There are some columns that we won't need it for our research, \n",
    "### I will drop those columns first to keep the data more readable.\n",
    "\n",
    "merged_salary_and_cost.drop(columns = ['Alpha-3 code', 'Numeric', 'cityid', 'dmaid','city', 'state','country'], inplace=True)\n",
    "merged_salary_and_cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "83024f1d-f4a7-4b03-aa76-90e14a001898",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Lets see the missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "e57b2c0d-8601-4ac3-b216-b7f2dc1fa56b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "City                                 0\n",
       "Country                              0\n",
       "Cost of Living Index                 0\n",
       "Rent Index                           0\n",
       "Cost of Living Plus Rent Index       0\n",
       "Groceries Index                      0\n",
       "Restaurant Price Index               0\n",
       "Local Purchasing Power Index         0\n",
       "Alpha-2 code                      2090\n",
       "company                            231\n",
       "title                              231\n",
       "totalyearlycompensation            231\n",
       "basesalary                         231\n",
       "stockgrantvalue                    231\n",
       "bonus                              231\n",
       "dtype: int64"
      ]
     },
     "execution_count": 330,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_salary_and_cost.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "id": "ae3793ae-a2dd-4f85-83fa-d0d4186a9367",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "City                               0.000000\n",
       "Country                            0.000000\n",
       "Cost of Living Index               0.000000\n",
       "Rent Index                         0.000000\n",
       "Cost of Living Plus Rent Index     0.000000\n",
       "Groceries Index                    0.000000\n",
       "Restaurant Price Index             0.000000\n",
       "Local Purchasing Power Index       0.000000\n",
       "Alpha-2 code                      37.461911\n",
       "company                            4.140527\n",
       "title                              4.140527\n",
       "totalyearlycompensation            4.140527\n",
       "basesalary                         4.140527\n",
       "stockgrantvalue                    4.140527\n",
       "bonus                              4.140527\n",
       "dtype: float64"
      ]
     },
     "execution_count": 332,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### I would like to see it as percentage. \n",
    "\n",
    "missing_values_perc = merged_salary_and_cost.isna().sum()/ len(merged_salary_and_cost) * 100\n",
    "missing_values_perc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "id": "ea7bc740-0342-401c-86da-261abfb1390c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['BM', 'CH', 'LB', 'NO', nan, 'IS', 'JE', 'IL', 'DK', 'JP', 'FR',\n",
       "       'SG', 'AU', 'LU', 'FI', 'HK', 'NZ', 'IE', 'SE', 'DE', 'AT', 'CA',\n",
       "       'BE', 'IT', 'MT', 'PR', 'MO', 'CY', 'ES', 'QA', 'GR', 'MV', 'SI',\n",
       "       'CU', 'EE', 'PA', 'BH', 'CN', 'SA', 'JO', 'UY', 'PT', 'HR', 'JM',\n",
       "       'LV', 'OM', 'SN', 'ET', 'TH', 'KH', 'SK', 'SR', 'KW', 'CR', 'LT',\n",
       "       'HU', 'ZW', 'CL', 'SV', 'ZA', 'GT', 'PL', 'ID', 'BW', 'BG', 'EC',\n",
       "       'RO', 'RS', 'MY', 'MA', 'ME', 'FJ', 'MX', 'GH', 'AL', 'IQ', 'BR',\n",
       "       'NG', 'UG', 'KE', 'AR', 'BD', 'MN', 'PE', 'UA', 'IN', 'AM', 'LK',\n",
       "       'ZM', 'BY', 'EG', 'RW', 'AZ', 'TR', 'GE', 'PY', 'KZ', 'TN', 'NP',\n",
       "       'DZ', 'UZ', 'CO', 'KG', 'PK', 'AF'], dtype=object)"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_salary_and_cost['Alpha-2 code'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "id": "76eddf62-e7e3-422b-a55c-a1b9fcd70ca4",
   "metadata": {},
   "outputs": [],
   "source": [
    "### As we see that there nan values in Alpha-2 code column. \n",
    "### I will drop those columns since it is only the %38 of the entire data.\n",
    "### We will be working on the rest of the data which will be enough for calculations \n",
    "\n",
    "merged_salary_and_cost.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "id": "def7881c-162a-4837-b176-5645ffe056c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "City                              0\n",
       "Country                           0\n",
       "Cost of Living Index              0\n",
       "Rent Index                        0\n",
       "Cost of Living Plus Rent Index    0\n",
       "Groceries Index                   0\n",
       "Restaurant Price Index            0\n",
       "Local Purchasing Power Index      0\n",
       "Alpha-2 code                      0\n",
       "company                           0\n",
       "title                             0\n",
       "totalyearlycompensation           0\n",
       "basesalary                        0\n",
       "stockgrantvalue                   0\n",
       "bonus                             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 338,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_salary_and_cost.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "c875c937-29b2-427d-8912-0215b79a2d3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Cost of Living Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Cost of Living Plus Rent Index</th>\n",
       "      <th>Groceries Index</th>\n",
       "      <th>Restaurant Price Index</th>\n",
       "      <th>Local Purchasing Power Index</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>company</th>\n",
       "      <th>title</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>basesalary</th>\n",
       "      <th>stockgrantvalue</th>\n",
       "      <th>bonus</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>Roche</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>Roche</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>128.13</td>\n",
       "      <td>72.12</td>\n",
       "      <td>101.87</td>\n",
       "      <td>132.61</td>\n",
       "      <td>130.93</td>\n",
       "      <td>143.40</td>\n",
       "      <td>CH</td>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>280000.0</td>\n",
       "      <td>190000.0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>15000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>133000.0</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>13000.0</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>19000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>26000.0</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>3000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>17000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3258 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country  Cost of Living Index  Rent Index  \\\n",
       "1     Zurich  Switzerland                131.24       69.26   \n",
       "2     Zurich  Switzerland                131.24       69.26   \n",
       "3      Basel  Switzerland                130.93       49.38   \n",
       "4      Basel  Switzerland                130.93       49.38   \n",
       "5        Zug  Switzerland                128.13       72.12   \n",
       "...      ...          ...                   ...         ...   \n",
       "5570  Kanpur        India                 20.79        3.60   \n",
       "5571  Kanpur        India                 20.79        3.60   \n",
       "5572  Kanpur        India                 20.79        3.60   \n",
       "5573  Kanpur        India                 20.79        3.60   \n",
       "5574  Kanpur        India                 20.79        3.60   \n",
       "\n",
       "      Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n",
       "1                             102.19           136.14                  132.52   \n",
       "2                             102.19           136.14                  132.52   \n",
       "3                              92.70           137.07                  130.95   \n",
       "4                              92.70           137.07                  130.95   \n",
       "5                             101.87           132.61                  130.93   \n",
       "...                              ...              ...                     ...   \n",
       "5570                           12.73            22.19                   13.31   \n",
       "5571                           12.73            22.19                   13.31   \n",
       "5572                           12.73            22.19                   13.31   \n",
       "5573                           12.73            22.19                   13.31   \n",
       "5574                           12.73            22.19                   13.31   \n",
       "\n",
       "      Local Purchasing Power Index Alpha-2 code               company  \\\n",
       "1                           129.79           CH                Google   \n",
       "2                           129.79           CH                 Roche   \n",
       "3                           111.53           CH                Google   \n",
       "4                           111.53           CH                 Roche   \n",
       "5                           143.40           CH                Google   \n",
       "...                            ...          ...                   ...   \n",
       "5570                         38.83           IN               Dream11   \n",
       "5571                         38.83           IN                Amazon   \n",
       "5572                         38.83           IN                 IQVIA   \n",
       "5573                         38.83           IN  Fidelity Investments   \n",
       "5574                         38.83           IN             Accenture   \n",
       "\n",
       "               title  totalyearlycompensation  basesalary  stockgrantvalue  \\\n",
       "1     Data Scientist                 345000.0    195000.0         120000.0   \n",
       "2     Data Scientist                  94000.0     94000.0              0.0   \n",
       "3     Data Scientist                 345000.0    195000.0         120000.0   \n",
       "4     Data Scientist                  94000.0     94000.0              0.0   \n",
       "5     Data Scientist                 345000.0    195000.0         120000.0   \n",
       "...              ...                      ...         ...              ...   \n",
       "5570  Data Scientist                 280000.0    190000.0          75000.0   \n",
       "5571  Data Scientist                 133000.0    100000.0          13000.0   \n",
       "5572  Data Scientist                  21000.0     19000.0              0.0   \n",
       "5573  Data Scientist                  26000.0     21000.0           2000.0   \n",
       "5574  Data Scientist                  20000.0     17000.0              0.0   \n",
       "\n",
       "        bonus  \n",
       "1     30000.0  \n",
       "2         0.0  \n",
       "3     30000.0  \n",
       "4         0.0  \n",
       "5     30000.0  \n",
       "...       ...  \n",
       "5570  15000.0  \n",
       "5571  20000.0  \n",
       "5572   2000.0  \n",
       "5573   3000.0  \n",
       "5574   3000.0  \n",
       "\n",
       "[3258 rows x 15 columns]"
      ]
     },
     "execution_count": 340,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_salary_and_cost\n",
    "\n",
    "### Now we have no NA values. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "703328de-f68b-4869-b480-b0729fc42b03",
   "metadata": {},
   "source": [
    "=========================================================================================================================\n",
    "\n",
    "#### Now we can start coding for the question that was asked. \n",
    "\n",
    "#### Which city or country is the best place to live based on the cost of living index and etc... "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "533742fb-ee2b-4b8a-9638-f1ae8759c432",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Let's see what we would spend on rent in a month. \n",
    "### My datasets name is merged_salary_and_cost\n",
    "\n",
    "totalyearlycompensation = merged_salary_and_cost['totalyearlycompensation']\n",
    "\n",
    "### Calculate monthly salary \n",
    "monthly_salary = totalyearlycompensation / 12  \n",
    "\n",
    "### Typically how much percentage of your monthly salary would a person spend \n",
    "### for the cost of living, rent, restaurant, groceries, and purchasing power\n",
    "\n",
    "rent_percentage = 0.30  # Typically 30% of income\n",
    "cost_of_living_percentage = 0.20  # Typically 20% of income\n",
    "groceries_percentage = 0.15  # Typically 15% of income\n",
    "restaurant_percentage = 0.10  # Typically 10% of income\n",
    "purchasing_power_percentage = 0.10 # Typically 10% of income\n",
    "\n",
    "### Calculate monthly spending based on indices \n",
    "monthly_spending_for_rent = (merged_salary_and_cost['Rent Index'] / 100) * (rent_percentage * monthly_salary)\n",
    "merged_salary_and_cost['monthly_spending_for_rent'] = monthly_spending_for_rent.round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "0b5e6796-360f-4852-9b1f-ae7bf20f3935",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Cost of Living Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Cost of Living Plus Rent Index</th>\n",
       "      <th>Groceries Index</th>\n",
       "      <th>Restaurant Price Index</th>\n",
       "      <th>Local Purchasing Power Index</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>company</th>\n",
       "      <th>title</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>basesalary</th>\n",
       "      <th>stockgrantvalue</th>\n",
       "      <th>bonus</th>\n",
       "      <th>monthly_spending_for_rent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>5973.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>131.24</td>\n",
       "      <td>69.26</td>\n",
       "      <td>102.19</td>\n",
       "      <td>136.14</td>\n",
       "      <td>132.52</td>\n",
       "      <td>129.79</td>\n",
       "      <td>CH</td>\n",
       "      <td>Roche</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1627.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>4259.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>130.93</td>\n",
       "      <td>49.38</td>\n",
       "      <td>92.70</td>\n",
       "      <td>137.07</td>\n",
       "      <td>130.95</td>\n",
       "      <td>111.53</td>\n",
       "      <td>CH</td>\n",
       "      <td>Roche</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1160.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>128.13</td>\n",
       "      <td>72.12</td>\n",
       "      <td>101.87</td>\n",
       "      <td>132.61</td>\n",
       "      <td>130.93</td>\n",
       "      <td>143.40</td>\n",
       "      <td>CH</td>\n",
       "      <td>Google</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>195000.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>6220.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>280000.0</td>\n",
       "      <td>190000.0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>15000.0</td>\n",
       "      <td>252.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>133000.0</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>13000.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>119.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>19000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>18.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>26000.0</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>23.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>20.79</td>\n",
       "      <td>3.60</td>\n",
       "      <td>12.73</td>\n",
       "      <td>22.19</td>\n",
       "      <td>13.31</td>\n",
       "      <td>38.83</td>\n",
       "      <td>IN</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>17000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>18.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3258 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country  Cost of Living Index  Rent Index  \\\n",
       "1     Zurich  Switzerland                131.24       69.26   \n",
       "2     Zurich  Switzerland                131.24       69.26   \n",
       "3      Basel  Switzerland                130.93       49.38   \n",
       "4      Basel  Switzerland                130.93       49.38   \n",
       "5        Zug  Switzerland                128.13       72.12   \n",
       "...      ...          ...                   ...         ...   \n",
       "5570  Kanpur        India                 20.79        3.60   \n",
       "5571  Kanpur        India                 20.79        3.60   \n",
       "5572  Kanpur        India                 20.79        3.60   \n",
       "5573  Kanpur        India                 20.79        3.60   \n",
       "5574  Kanpur        India                 20.79        3.60   \n",
       "\n",
       "      Cost of Living Plus Rent Index  Groceries Index  Restaurant Price Index  \\\n",
       "1                             102.19           136.14                  132.52   \n",
       "2                             102.19           136.14                  132.52   \n",
       "3                              92.70           137.07                  130.95   \n",
       "4                              92.70           137.07                  130.95   \n",
       "5                             101.87           132.61                  130.93   \n",
       "...                              ...              ...                     ...   \n",
       "5570                           12.73            22.19                   13.31   \n",
       "5571                           12.73            22.19                   13.31   \n",
       "5572                           12.73            22.19                   13.31   \n",
       "5573                           12.73            22.19                   13.31   \n",
       "5574                           12.73            22.19                   13.31   \n",
       "\n",
       "      Local Purchasing Power Index Alpha-2 code               company  \\\n",
       "1                           129.79           CH                Google   \n",
       "2                           129.79           CH                 Roche   \n",
       "3                           111.53           CH                Google   \n",
       "4                           111.53           CH                 Roche   \n",
       "5                           143.40           CH                Google   \n",
       "...                            ...          ...                   ...   \n",
       "5570                         38.83           IN               Dream11   \n",
       "5571                         38.83           IN                Amazon   \n",
       "5572                         38.83           IN                 IQVIA   \n",
       "5573                         38.83           IN  Fidelity Investments   \n",
       "5574                         38.83           IN             Accenture   \n",
       "\n",
       "               title  totalyearlycompensation  basesalary  stockgrantvalue  \\\n",
       "1     Data Scientist                 345000.0    195000.0         120000.0   \n",
       "2     Data Scientist                  94000.0     94000.0              0.0   \n",
       "3     Data Scientist                 345000.0    195000.0         120000.0   \n",
       "4     Data Scientist                  94000.0     94000.0              0.0   \n",
       "5     Data Scientist                 345000.0    195000.0         120000.0   \n",
       "...              ...                      ...         ...              ...   \n",
       "5570  Data Scientist                 280000.0    190000.0          75000.0   \n",
       "5571  Data Scientist                 133000.0    100000.0          13000.0   \n",
       "5572  Data Scientist                  21000.0     19000.0              0.0   \n",
       "5573  Data Scientist                  26000.0     21000.0           2000.0   \n",
       "5574  Data Scientist                  20000.0     17000.0              0.0   \n",
       "\n",
       "        bonus  monthly_spending_for_rent  \n",
       "1     30000.0                    5973.68  \n",
       "2         0.0                    1627.61  \n",
       "3     30000.0                    4259.03  \n",
       "4         0.0                    1160.43  \n",
       "5     30000.0                    6220.35  \n",
       "...       ...                        ...  \n",
       "5570  15000.0                     252.00  \n",
       "5571  20000.0                     119.70  \n",
       "5572   2000.0                      18.90  \n",
       "5573   3000.0                      23.40  \n",
       "5574   3000.0                      18.00  \n",
       "\n",
       "[3258 rows x 16 columns]"
      ]
     },
     "execution_count": 345,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_salary_and_cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "id": "38cc183d-ca2b-4c70-befd-509675135e77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['City', 'Country', 'Cost of Living Index', 'Rent Index',\n",
      "       'Cost of Living Plus Rent Index', 'Groceries Index',\n",
      "       'Restaurant Price Index', 'Local Purchasing Power Index',\n",
      "       'Alpha-2 code', 'company', 'title', 'totalyearlycompensation',\n",
      "       'basesalary', 'stockgrantvalue', 'bonus', 'monthly_spending_for_rent'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(merged_salary_and_cost.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "id": "715764fe-fbe9-4636-80e7-546250558ea4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>280000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>133000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>21000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>26000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3258 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country Alpha-2 code           title               company  \\\n",
       "1     Zurich  Switzerland           CH  Data Scientist                Google   \n",
       "2     Zurich  Switzerland           CH  Data Scientist                 Roche   \n",
       "3      Basel  Switzerland           CH  Data Scientist                Google   \n",
       "4      Basel  Switzerland           CH  Data Scientist                 Roche   \n",
       "5        Zug  Switzerland           CH  Data Scientist                Google   \n",
       "...      ...          ...          ...             ...                   ...   \n",
       "5570  Kanpur        India           IN  Data Scientist               Dream11   \n",
       "5571  Kanpur        India           IN  Data Scientist                Amazon   \n",
       "5572  Kanpur        India           IN  Data Scientist                 IQVIA   \n",
       "5573  Kanpur        India           IN  Data Scientist  Fidelity Investments   \n",
       "5574  Kanpur        India           IN  Data Scientist             Accenture   \n",
       "\n",
       "      totalyearlycompensation  \n",
       "1                    345000.0  \n",
       "2                     94000.0  \n",
       "3                    345000.0  \n",
       "4                     94000.0  \n",
       "5                    345000.0  \n",
       "...                       ...  \n",
       "5570                 280000.0  \n",
       "5571                 133000.0  \n",
       "5572                  21000.0  \n",
       "5573                  26000.0  \n",
       "5574                  20000.0  \n",
       "\n",
       "[3258 rows x 6 columns]"
      ]
     },
     "execution_count": 349,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### The dataset \"merged_salary_and_cost\" is getting very crowded and difficult to follow.\n",
    "### I will create a new data frame and add all these findings with City and Country and ALpha-2 code\n",
    "### into that dataframe\n",
    "### We will call it 'yearly_spendings_df'\n",
    "\n",
    "columns_to_include = ['City','Country','Alpha-2 code', 'title', 'company','totalyearlycompensation']\n",
    "\n",
    "yearly_spendings_df = merged_salary_and_cost[columns_to_include].copy()\n",
    "\n",
    "yearly_spendings_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "id": "0ff427bd-0c23-4b76-a9f8-30ca0e47169e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>280000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>133000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>21000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>26000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3258 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country Alpha-2 code           title               company  \\\n",
       "1     Zurich  Switzerland           CH  Data Scientist                Google   \n",
       "2     Zurich  Switzerland           CH  Data Scientist                 Roche   \n",
       "3      Basel  Switzerland           CH  Data Scientist                Google   \n",
       "4      Basel  Switzerland           CH  Data Scientist                 Roche   \n",
       "5        Zug  Switzerland           CH  Data Scientist                Google   \n",
       "...      ...          ...          ...             ...                   ...   \n",
       "5570  Kanpur        India           IN  Data Scientist               Dream11   \n",
       "5571  Kanpur        India           IN  Data Scientist                Amazon   \n",
       "5572  Kanpur        India           IN  Data Scientist                 IQVIA   \n",
       "5573  Kanpur        India           IN  Data Scientist  Fidelity Investments   \n",
       "5574  Kanpur        India           IN  Data Scientist             Accenture   \n",
       "\n",
       "      totalyearlycompensation  \n",
       "1                    345000.0  \n",
       "2                     94000.0  \n",
       "3                    345000.0  \n",
       "4                     94000.0  \n",
       "5                    345000.0  \n",
       "...                       ...  \n",
       "5570                 280000.0  \n",
       "5571                 133000.0  \n",
       "5572                  21000.0  \n",
       "5573                  26000.0  \n",
       "5574                  20000.0  \n",
       "\n",
       "[3258 rows x 6 columns]"
      ]
     },
     "execution_count": 353,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yearly_spendings_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "id": "b2a25e5d-7897-4524-b23a-0043f68489b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Now that we have tested our code on the rent index, we can apply the same formula to other indexes\n",
    "monthly_spending_for_rent = (merged_salary_and_cost['Rent Index'] / 100) * (rent_percentage * monthly_salary)\n",
    "monthly_cost_of_living = (merged_salary_and_cost['Cost of Living Index'] / 100) * (cost_of_living_percentage * monthly_salary)\n",
    "monthly_groceries = (merged_salary_and_cost['Groceries Index'] / 100) * (groceries_percentage * monthly_salary)\n",
    "monthly_restaurant_price = (merged_salary_and_cost['Restaurant Price Index'] / 100) * (restaurant_percentage * monthly_salary)\n",
    "monthly_local_purchasing_power = (merged_salary_and_cost['Local Purchasing Power Index'] / 100) * (purchasing_power_percentage * monthly_salary)\n",
    "\n",
    "yearly_spending_for_rent = monthly_spending_for_rent * 12\n",
    "yearly_cost_of_living = monthly_cost_of_living * 12\n",
    "yearly_groceries = monthly_groceries * 12\n",
    "yearly_local_purchasing_power = monthly_local_purchasing_power * 12\n",
    "yearly_restaurant_price = monthly_restaurant_price * 12\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "id": "972d92e6-0c22-4d82-9753-84d0a23c55bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Now let's add all these data into new data frame 'yearly_spendings_df'\n",
    "\n",
    "yearly_spendings_df['yearly_spending_for_rent'] = yearly_spending_for_rent.round(2)\n",
    "yearly_spendings_df['yearly_cost_of_living'] = yearly_cost_of_living.round(2)\n",
    "yearly_spendings_df['yearly_groceries'] = yearly_groceries.round(2)\n",
    "yearly_spendings_df['yearly_restaurant_price'] = yearly_restaurant_price.round(2)\n",
    "yearly_spendings_df['yearly_local_purchasing_power'] = yearly_local_purchasing_power.round(2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "65d0217b-e260-4505-a0ea-90da0c4de0b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>yearly_spending_for_rent</th>\n",
       "      <th>yearly_cost_of_living</th>\n",
       "      <th>yearly_groceries</th>\n",
       "      <th>yearly_restaurant_price</th>\n",
       "      <th>yearly_local_purchasing_power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>71684.10</td>\n",
       "      <td>90555.60</td>\n",
       "      <td>70452.45</td>\n",
       "      <td>45719.40</td>\n",
       "      <td>44777.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>19531.32</td>\n",
       "      <td>24673.12</td>\n",
       "      <td>19195.74</td>\n",
       "      <td>12456.88</td>\n",
       "      <td>12200.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>51108.30</td>\n",
       "      <td>90341.70</td>\n",
       "      <td>70933.73</td>\n",
       "      <td>45177.75</td>\n",
       "      <td>38477.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>13925.16</td>\n",
       "      <td>24614.84</td>\n",
       "      <td>19326.87</td>\n",
       "      <td>12309.30</td>\n",
       "      <td>10483.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>74644.20</td>\n",
       "      <td>88409.70</td>\n",
       "      <td>68625.68</td>\n",
       "      <td>45170.85</td>\n",
       "      <td>49473.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     City      Country Alpha-2 code           title company  \\\n",
       "1  Zurich  Switzerland           CH  Data Scientist  Google   \n",
       "2  Zurich  Switzerland           CH  Data Scientist   Roche   \n",
       "3   Basel  Switzerland           CH  Data Scientist  Google   \n",
       "4   Basel  Switzerland           CH  Data Scientist   Roche   \n",
       "5     Zug  Switzerland           CH  Data Scientist  Google   \n",
       "\n",
       "   totalyearlycompensation  yearly_spending_for_rent  yearly_cost_of_living  \\\n",
       "1                 345000.0                  71684.10               90555.60   \n",
       "2                  94000.0                  19531.32               24673.12   \n",
       "3                 345000.0                  51108.30               90341.70   \n",
       "4                  94000.0                  13925.16               24614.84   \n",
       "5                 345000.0                  74644.20               88409.70   \n",
       "\n",
       "   yearly_groceries  yearly_restaurant_price  yearly_local_purchasing_power  \n",
       "1          70452.45                 45719.40                       44777.55  \n",
       "2          19195.74                 12456.88                       12200.26  \n",
       "3          70933.73                 45177.75                       38477.85  \n",
       "4          19326.87                 12309.30                       10483.82  \n",
       "5          68625.68                 45170.85                       49473.00  "
      ]
     },
     "execution_count": 359,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yearly_spendings_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "id": "661abe36-c005-4d5c-9c5c-8c809b5ae645",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Now we can calculate the total spending based on the calculations. \n",
    "\n",
    "yearly_total_spending = sum([yearly_cost_of_living,yearly_groceries,yearly_local_purchasing_power,yearly_restaurant_price,yearly_spending_for_rent])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "id": "1c787b6c-4dab-4f88-8d66-b444551cdd9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1       323189.100\n",
       "2        88057.320\n",
       "3       296039.325\n",
       "4        80659.990\n",
       "5       326323.425\n",
       "           ...    \n",
       "5570     38585.400\n",
       "5571     18328.065\n",
       "5572      2893.905\n",
       "5573      3582.930\n",
       "5574      2756.100\n",
       "Length: 3258, dtype: float64"
      ]
     },
     "execution_count": 363,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yearly_total_spending"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "id": "feed376f-38f6-4809-a320-8fc038de265f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>yearly_total_spending</th>\n",
       "      <th>yearly_spending_for_rent</th>\n",
       "      <th>yearly_cost_of_living</th>\n",
       "      <th>yearly_groceries</th>\n",
       "      <th>yearly_restaurant_price</th>\n",
       "      <th>yearly_local_purchasing_power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>323189.10</td>\n",
       "      <td>71684.10</td>\n",
       "      <td>90555.60</td>\n",
       "      <td>70452.45</td>\n",
       "      <td>45719.40</td>\n",
       "      <td>44777.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>88057.32</td>\n",
       "      <td>19531.32</td>\n",
       "      <td>24673.12</td>\n",
       "      <td>19195.74</td>\n",
       "      <td>12456.88</td>\n",
       "      <td>12200.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>296039.32</td>\n",
       "      <td>51108.30</td>\n",
       "      <td>90341.70</td>\n",
       "      <td>70933.73</td>\n",
       "      <td>45177.75</td>\n",
       "      <td>38477.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>80659.99</td>\n",
       "      <td>13925.16</td>\n",
       "      <td>24614.84</td>\n",
       "      <td>19326.87</td>\n",
       "      <td>12309.30</td>\n",
       "      <td>10483.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>326323.43</td>\n",
       "      <td>74644.20</td>\n",
       "      <td>88409.70</td>\n",
       "      <td>68625.68</td>\n",
       "      <td>45170.85</td>\n",
       "      <td>49473.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>280000.0</td>\n",
       "      <td>38585.40</td>\n",
       "      <td>3024.00</td>\n",
       "      <td>11642.40</td>\n",
       "      <td>9319.80</td>\n",
       "      <td>3726.80</td>\n",
       "      <td>10872.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>133000.0</td>\n",
       "      <td>18328.07</td>\n",
       "      <td>1436.40</td>\n",
       "      <td>5530.14</td>\n",
       "      <td>4426.90</td>\n",
       "      <td>1770.23</td>\n",
       "      <td>5164.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>2893.91</td>\n",
       "      <td>226.80</td>\n",
       "      <td>873.18</td>\n",
       "      <td>698.98</td>\n",
       "      <td>279.51</td>\n",
       "      <td>815.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>26000.0</td>\n",
       "      <td>3582.93</td>\n",
       "      <td>280.80</td>\n",
       "      <td>1081.08</td>\n",
       "      <td>865.41</td>\n",
       "      <td>346.06</td>\n",
       "      <td>1009.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>2756.10</td>\n",
       "      <td>216.00</td>\n",
       "      <td>831.60</td>\n",
       "      <td>665.70</td>\n",
       "      <td>266.20</td>\n",
       "      <td>776.60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3258 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country Alpha-2 code           title               company  \\\n",
       "1     Zurich  Switzerland           CH  Data Scientist                Google   \n",
       "2     Zurich  Switzerland           CH  Data Scientist                 Roche   \n",
       "3      Basel  Switzerland           CH  Data Scientist                Google   \n",
       "4      Basel  Switzerland           CH  Data Scientist                 Roche   \n",
       "5        Zug  Switzerland           CH  Data Scientist                Google   \n",
       "...      ...          ...          ...             ...                   ...   \n",
       "5570  Kanpur        India           IN  Data Scientist               Dream11   \n",
       "5571  Kanpur        India           IN  Data Scientist                Amazon   \n",
       "5572  Kanpur        India           IN  Data Scientist                 IQVIA   \n",
       "5573  Kanpur        India           IN  Data Scientist  Fidelity Investments   \n",
       "5574  Kanpur        India           IN  Data Scientist             Accenture   \n",
       "\n",
       "      totalyearlycompensation  yearly_total_spending  \\\n",
       "1                    345000.0              323189.10   \n",
       "2                     94000.0               88057.32   \n",
       "3                    345000.0              296039.32   \n",
       "4                     94000.0               80659.99   \n",
       "5                    345000.0              326323.43   \n",
       "...                       ...                    ...   \n",
       "5570                 280000.0               38585.40   \n",
       "5571                 133000.0               18328.07   \n",
       "5572                  21000.0                2893.91   \n",
       "5573                  26000.0                3582.93   \n",
       "5574                  20000.0                2756.10   \n",
       "\n",
       "      yearly_spending_for_rent  yearly_cost_of_living  yearly_groceries  \\\n",
       "1                     71684.10               90555.60          70452.45   \n",
       "2                     19531.32               24673.12          19195.74   \n",
       "3                     51108.30               90341.70          70933.73   \n",
       "4                     13925.16               24614.84          19326.87   \n",
       "5                     74644.20               88409.70          68625.68   \n",
       "...                        ...                    ...               ...   \n",
       "5570                   3024.00               11642.40           9319.80   \n",
       "5571                   1436.40                5530.14           4426.90   \n",
       "5572                    226.80                 873.18            698.98   \n",
       "5573                    280.80                1081.08            865.41   \n",
       "5574                    216.00                 831.60            665.70   \n",
       "\n",
       "      yearly_restaurant_price  yearly_local_purchasing_power  \n",
       "1                    45719.40                       44777.55  \n",
       "2                    12456.88                       12200.26  \n",
       "3                    45177.75                       38477.85  \n",
       "4                    12309.30                       10483.82  \n",
       "5                    45170.85                       49473.00  \n",
       "...                       ...                            ...  \n",
       "5570                  3726.80                       10872.40  \n",
       "5571                  1770.23                        5164.39  \n",
       "5572                   279.51                         815.43  \n",
       "5573                   346.06                        1009.58  \n",
       "5574                   266.20                         776.60  \n",
       "\n",
       "[3258 rows x 12 columns]"
      ]
     },
     "execution_count": 365,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Let's add these to the dataset\n",
    "\n",
    "yearly_spendings_df.insert(6,'yearly_total_spending', yearly_total_spending.round(2))\n",
    "yearly_spendings_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "id": "38a27d51-610f-4df9-964f-15f2423168a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "93"
      ]
     },
     "execution_count": 367,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### I just want to check if we have any duplicates after all calculations.\n",
    "\n",
    "yearly_spendings_df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "id": "e8d0083d-b1c7-42d4-b2a6-f01e1c3f600d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>yearly_total_spending</th>\n",
       "      <th>yearly_spending_for_rent</th>\n",
       "      <th>yearly_cost_of_living</th>\n",
       "      <th>yearly_groceries</th>\n",
       "      <th>yearly_restaurant_price</th>\n",
       "      <th>yearly_local_purchasing_power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>323189.10</td>\n",
       "      <td>71684.10</td>\n",
       "      <td>90555.60</td>\n",
       "      <td>70452.45</td>\n",
       "      <td>45719.40</td>\n",
       "      <td>44777.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>88057.32</td>\n",
       "      <td>19531.32</td>\n",
       "      <td>24673.12</td>\n",
       "      <td>19195.74</td>\n",
       "      <td>12456.88</td>\n",
       "      <td>12200.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>296039.32</td>\n",
       "      <td>51108.30</td>\n",
       "      <td>90341.70</td>\n",
       "      <td>70933.73</td>\n",
       "      <td>45177.75</td>\n",
       "      <td>38477.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>80659.99</td>\n",
       "      <td>13925.16</td>\n",
       "      <td>24614.84</td>\n",
       "      <td>19326.87</td>\n",
       "      <td>12309.30</td>\n",
       "      <td>10483.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>326323.43</td>\n",
       "      <td>74644.20</td>\n",
       "      <td>88409.70</td>\n",
       "      <td>68625.68</td>\n",
       "      <td>45170.85</td>\n",
       "      <td>49473.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>280000.0</td>\n",
       "      <td>38585.40</td>\n",
       "      <td>3024.00</td>\n",
       "      <td>11642.40</td>\n",
       "      <td>9319.80</td>\n",
       "      <td>3726.80</td>\n",
       "      <td>10872.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>133000.0</td>\n",
       "      <td>18328.07</td>\n",
       "      <td>1436.40</td>\n",
       "      <td>5530.14</td>\n",
       "      <td>4426.90</td>\n",
       "      <td>1770.23</td>\n",
       "      <td>5164.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>2893.91</td>\n",
       "      <td>226.80</td>\n",
       "      <td>873.18</td>\n",
       "      <td>698.98</td>\n",
       "      <td>279.51</td>\n",
       "      <td>815.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>26000.0</td>\n",
       "      <td>3582.93</td>\n",
       "      <td>280.80</td>\n",
       "      <td>1081.08</td>\n",
       "      <td>865.41</td>\n",
       "      <td>346.06</td>\n",
       "      <td>1009.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>2756.10</td>\n",
       "      <td>216.00</td>\n",
       "      <td>831.60</td>\n",
       "      <td>665.70</td>\n",
       "      <td>266.20</td>\n",
       "      <td>776.60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3165 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country Alpha-2 code           title               company  \\\n",
       "1     Zurich  Switzerland           CH  Data Scientist                Google   \n",
       "2     Zurich  Switzerland           CH  Data Scientist                 Roche   \n",
       "3      Basel  Switzerland           CH  Data Scientist                Google   \n",
       "4      Basel  Switzerland           CH  Data Scientist                 Roche   \n",
       "5        Zug  Switzerland           CH  Data Scientist                Google   \n",
       "...      ...          ...          ...             ...                   ...   \n",
       "5570  Kanpur        India           IN  Data Scientist               Dream11   \n",
       "5571  Kanpur        India           IN  Data Scientist                Amazon   \n",
       "5572  Kanpur        India           IN  Data Scientist                 IQVIA   \n",
       "5573  Kanpur        India           IN  Data Scientist  Fidelity Investments   \n",
       "5574  Kanpur        India           IN  Data Scientist             Accenture   \n",
       "\n",
       "      totalyearlycompensation  yearly_total_spending  \\\n",
       "1                    345000.0              323189.10   \n",
       "2                     94000.0               88057.32   \n",
       "3                    345000.0              296039.32   \n",
       "4                     94000.0               80659.99   \n",
       "5                    345000.0              326323.43   \n",
       "...                       ...                    ...   \n",
       "5570                 280000.0               38585.40   \n",
       "5571                 133000.0               18328.07   \n",
       "5572                  21000.0                2893.91   \n",
       "5573                  26000.0                3582.93   \n",
       "5574                  20000.0                2756.10   \n",
       "\n",
       "      yearly_spending_for_rent  yearly_cost_of_living  yearly_groceries  \\\n",
       "1                     71684.10               90555.60          70452.45   \n",
       "2                     19531.32               24673.12          19195.74   \n",
       "3                     51108.30               90341.70          70933.73   \n",
       "4                     13925.16               24614.84          19326.87   \n",
       "5                     74644.20               88409.70          68625.68   \n",
       "...                        ...                    ...               ...   \n",
       "5570                   3024.00               11642.40           9319.80   \n",
       "5571                   1436.40                5530.14           4426.90   \n",
       "5572                    226.80                 873.18            698.98   \n",
       "5573                    280.80                1081.08            865.41   \n",
       "5574                    216.00                 831.60            665.70   \n",
       "\n",
       "      yearly_restaurant_price  yearly_local_purchasing_power  \n",
       "1                    45719.40                       44777.55  \n",
       "2                    12456.88                       12200.26  \n",
       "3                    45177.75                       38477.85  \n",
       "4                    12309.30                       10483.82  \n",
       "5                    45170.85                       49473.00  \n",
       "...                       ...                            ...  \n",
       "5570                  3726.80                       10872.40  \n",
       "5571                  1770.23                        5164.39  \n",
       "5572                   279.51                         815.43  \n",
       "5573                   346.06                        1009.58  \n",
       "5574                   266.20                         776.60  \n",
       "\n",
       "[3165 rows x 12 columns]"
      ]
     },
     "execution_count": 369,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### As we see we have 93 duplicates, so now let's remove the duplicates. \n",
    "\n",
    "yearly_spendings_df.drop_duplicates(inplace=True)\n",
    "\n",
    "yearly_spendings_df    ###(should be 3258 - 93 = 3165 rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "id": "9bed90ee-7706-4836-8997-16f3fe183127",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Now let's calculate the savings and add that into the data frame in index 7.\n",
    "\n",
    "yearly_saving = totalyearlycompensation - yearly_total_spending\n",
    "\n",
    "yearly_spendings_df.insert(7,'yearly_saving', yearly_saving.round(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "id": "97df0d3b-a59c-4172-83e5-09d61189777f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>yearly_total_spending</th>\n",
       "      <th>yearly_saving</th>\n",
       "      <th>yearly_spending_for_rent</th>\n",
       "      <th>yearly_cost_of_living</th>\n",
       "      <th>yearly_groceries</th>\n",
       "      <th>yearly_restaurant_price</th>\n",
       "      <th>yearly_local_purchasing_power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>323189.10</td>\n",
       "      <td>21810.90</td>\n",
       "      <td>71684.10</td>\n",
       "      <td>90555.60</td>\n",
       "      <td>70452.45</td>\n",
       "      <td>45719.40</td>\n",
       "      <td>44777.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>88057.32</td>\n",
       "      <td>5942.68</td>\n",
       "      <td>19531.32</td>\n",
       "      <td>24673.12</td>\n",
       "      <td>19195.74</td>\n",
       "      <td>12456.88</td>\n",
       "      <td>12200.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>296039.32</td>\n",
       "      <td>48960.67</td>\n",
       "      <td>51108.30</td>\n",
       "      <td>90341.70</td>\n",
       "      <td>70933.73</td>\n",
       "      <td>45177.75</td>\n",
       "      <td>38477.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>80659.99</td>\n",
       "      <td>13340.01</td>\n",
       "      <td>13925.16</td>\n",
       "      <td>24614.84</td>\n",
       "      <td>19326.87</td>\n",
       "      <td>12309.30</td>\n",
       "      <td>10483.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>326323.43</td>\n",
       "      <td>18676.57</td>\n",
       "      <td>74644.20</td>\n",
       "      <td>88409.70</td>\n",
       "      <td>68625.68</td>\n",
       "      <td>45170.85</td>\n",
       "      <td>49473.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>280000.0</td>\n",
       "      <td>38585.40</td>\n",
       "      <td>241414.60</td>\n",
       "      <td>3024.00</td>\n",
       "      <td>11642.40</td>\n",
       "      <td>9319.80</td>\n",
       "      <td>3726.80</td>\n",
       "      <td>10872.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>133000.0</td>\n",
       "      <td>18328.07</td>\n",
       "      <td>114671.94</td>\n",
       "      <td>1436.40</td>\n",
       "      <td>5530.14</td>\n",
       "      <td>4426.90</td>\n",
       "      <td>1770.23</td>\n",
       "      <td>5164.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>2893.91</td>\n",
       "      <td>18106.10</td>\n",
       "      <td>226.80</td>\n",
       "      <td>873.18</td>\n",
       "      <td>698.98</td>\n",
       "      <td>279.51</td>\n",
       "      <td>815.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>26000.0</td>\n",
       "      <td>3582.93</td>\n",
       "      <td>22417.07</td>\n",
       "      <td>280.80</td>\n",
       "      <td>1081.08</td>\n",
       "      <td>865.41</td>\n",
       "      <td>346.06</td>\n",
       "      <td>1009.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>2756.10</td>\n",
       "      <td>17243.90</td>\n",
       "      <td>216.00</td>\n",
       "      <td>831.60</td>\n",
       "      <td>665.70</td>\n",
       "      <td>266.20</td>\n",
       "      <td>776.60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3165 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country Alpha-2 code           title               company  \\\n",
       "1     Zurich  Switzerland           CH  Data Scientist                Google   \n",
       "2     Zurich  Switzerland           CH  Data Scientist                 Roche   \n",
       "3      Basel  Switzerland           CH  Data Scientist                Google   \n",
       "4      Basel  Switzerland           CH  Data Scientist                 Roche   \n",
       "5        Zug  Switzerland           CH  Data Scientist                Google   \n",
       "...      ...          ...          ...             ...                   ...   \n",
       "5570  Kanpur        India           IN  Data Scientist               Dream11   \n",
       "5571  Kanpur        India           IN  Data Scientist                Amazon   \n",
       "5572  Kanpur        India           IN  Data Scientist                 IQVIA   \n",
       "5573  Kanpur        India           IN  Data Scientist  Fidelity Investments   \n",
       "5574  Kanpur        India           IN  Data Scientist             Accenture   \n",
       "\n",
       "      totalyearlycompensation  yearly_total_spending  yearly_saving  \\\n",
       "1                    345000.0              323189.10       21810.90   \n",
       "2                     94000.0               88057.32        5942.68   \n",
       "3                    345000.0              296039.32       48960.67   \n",
       "4                     94000.0               80659.99       13340.01   \n",
       "5                    345000.0              326323.43       18676.57   \n",
       "...                       ...                    ...            ...   \n",
       "5570                 280000.0               38585.40      241414.60   \n",
       "5571                 133000.0               18328.07      114671.94   \n",
       "5572                  21000.0                2893.91       18106.10   \n",
       "5573                  26000.0                3582.93       22417.07   \n",
       "5574                  20000.0                2756.10       17243.90   \n",
       "\n",
       "      yearly_spending_for_rent  yearly_cost_of_living  yearly_groceries  \\\n",
       "1                     71684.10               90555.60          70452.45   \n",
       "2                     19531.32               24673.12          19195.74   \n",
       "3                     51108.30               90341.70          70933.73   \n",
       "4                     13925.16               24614.84          19326.87   \n",
       "5                     74644.20               88409.70          68625.68   \n",
       "...                        ...                    ...               ...   \n",
       "5570                   3024.00               11642.40           9319.80   \n",
       "5571                   1436.40                5530.14           4426.90   \n",
       "5572                    226.80                 873.18            698.98   \n",
       "5573                    280.80                1081.08            865.41   \n",
       "5574                    216.00                 831.60            665.70   \n",
       "\n",
       "      yearly_restaurant_price  yearly_local_purchasing_power  \n",
       "1                    45719.40                       44777.55  \n",
       "2                    12456.88                       12200.26  \n",
       "3                    45177.75                       38477.85  \n",
       "4                    12309.30                       10483.82  \n",
       "5                    45170.85                       49473.00  \n",
       "...                       ...                            ...  \n",
       "5570                  3726.80                       10872.40  \n",
       "5571                  1770.23                        5164.39  \n",
       "5572                   279.51                         815.43  \n",
       "5573                   346.06                        1009.58  \n",
       "5574                   266.20                         776.60  \n",
       "\n",
       "[3165 rows x 13 columns]"
      ]
     },
     "execution_count": 373,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yearly_spendings_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "id": "aa056794-6d57-4846-8d24-5849e7b78239",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Since we are looking into the top 5 cities for each rent, groceries, cost of living, and restaurant indexes based on our salary\n",
    "### I will create variables showing how many percent of our salary goes to rent, restaurants, groceries, and cost of living. \n",
    "### Then we can put them to find the top 5 cities.\n",
    "\n",
    "salary_to_cost_of_living_perc = ((yearly_cost_of_living / totalyearlycompensation) * 100).round(2)\n",
    "salary_to_rent_perc = ((yearly_spending_for_rent / totalyearlycompensation) * 100).round(2)\n",
    "salary_to_groceries_perc = ((yearly_groceries / totalyearlycompensation) * 100).round(2)\n",
    "salary_to_restaurant_perc = ((yearly_restaurant_price / totalyearlycompensation) * 100).round(2)\n",
    "salary_to_purchase_power_perc = ((yearly_local_purchasing_power / totalyearlycompensation) * 100).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "id": "b448dee4-8d02-4082-9d3f-8114437ff14e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['City', 'Country', 'Alpha-2 code', 'title', 'company',\n",
      "       'totalyearlycompensation', 'yearly_total_spending', 'yearly_saving',\n",
      "       'yearly_spending_for_rent', 'yearly_cost_of_living', 'yearly_groceries',\n",
      "       'yearly_restaurant_price', 'yearly_local_purchasing_power'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(yearly_spendings_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "id": "153cc146-7af0-45f2-9636-50daddba1d06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>280000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>133000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>21000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>26000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3165 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country Alpha-2 code           title               company  \\\n",
       "1     Zurich  Switzerland           CH  Data Scientist                Google   \n",
       "2     Zurich  Switzerland           CH  Data Scientist                 Roche   \n",
       "3      Basel  Switzerland           CH  Data Scientist                Google   \n",
       "4      Basel  Switzerland           CH  Data Scientist                 Roche   \n",
       "5        Zug  Switzerland           CH  Data Scientist                Google   \n",
       "...      ...          ...          ...             ...                   ...   \n",
       "5570  Kanpur        India           IN  Data Scientist               Dream11   \n",
       "5571  Kanpur        India           IN  Data Scientist                Amazon   \n",
       "5572  Kanpur        India           IN  Data Scientist                 IQVIA   \n",
       "5573  Kanpur        India           IN  Data Scientist  Fidelity Investments   \n",
       "5574  Kanpur        India           IN  Data Scientist             Accenture   \n",
       "\n",
       "      totalyearlycompensation  \n",
       "1                    345000.0  \n",
       "2                     94000.0  \n",
       "3                    345000.0  \n",
       "4                     94000.0  \n",
       "5                    345000.0  \n",
       "...                       ...  \n",
       "5570                 280000.0  \n",
       "5571                 133000.0  \n",
       "5572                  21000.0  \n",
       "5573                  26000.0  \n",
       "5574                  20000.0  \n",
       "\n",
       "[3165 rows x 6 columns]"
      ]
     },
     "execution_count": 379,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### we can create another data frame to keep everything clean\n",
    "\n",
    "columns_to_include_to_perc_df = ['City','Country','Alpha-2 code','title','company','totalyearlycompensation']\n",
    "\n",
    "salary_to_spendings_perc_df = yearly_spendings_df[columns_to_include_to_perc_df].copy()\n",
    "\n",
    "salary_to_spendings_perc_df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "id": "650fd340-6569-42dc-820e-0f35030f9dd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Now we can add the percentages for each indexes into new data frame\n",
    "\n",
    "salary_to_spendings_perc_df.insert(6,'salary_to_cost_perc', salary_to_cost_of_living_perc)\n",
    "salary_to_spendings_perc_df.insert(7,'salary_to_rent_perc', salary_to_rent_perc)\n",
    "salary_to_spendings_perc_df.insert(8,'salary_to_groceries_perc', salary_to_groceries_perc)\n",
    "salary_to_spendings_perc_df.insert(9,'salary_to_restaurant_perc', salary_to_restaurant_perc)\n",
    "salary_to_spendings_perc_df.insert(9,'salary_to_purchase_power_perc', salary_to_purchase_power_perc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "8ed63d68-c0b2-4914-b498-25578d661af1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>salary_to_cost_perc</th>\n",
       "      <th>salary_to_rent_perc</th>\n",
       "      <th>salary_to_groceries_perc</th>\n",
       "      <th>salary_to_purchase_power_perc</th>\n",
       "      <th>salary_to_restaurant_perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>26.25</td>\n",
       "      <td>20.78</td>\n",
       "      <td>20.42</td>\n",
       "      <td>12.98</td>\n",
       "      <td>13.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>26.25</td>\n",
       "      <td>20.78</td>\n",
       "      <td>20.42</td>\n",
       "      <td>12.98</td>\n",
       "      <td>13.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>26.19</td>\n",
       "      <td>14.81</td>\n",
       "      <td>20.56</td>\n",
       "      <td>11.15</td>\n",
       "      <td>13.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>26.19</td>\n",
       "      <td>14.81</td>\n",
       "      <td>20.56</td>\n",
       "      <td>11.15</td>\n",
       "      <td>13.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>25.63</td>\n",
       "      <td>21.64</td>\n",
       "      <td>19.89</td>\n",
       "      <td>14.34</td>\n",
       "      <td>13.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Dream11</td>\n",
       "      <td>280000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>133000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5572</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>IQVIA</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Fidelity Investments</td>\n",
       "      <td>26000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5574</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Accenture</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3165 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country Alpha-2 code           title               company  \\\n",
       "1     Zurich  Switzerland           CH  Data Scientist                Google   \n",
       "2     Zurich  Switzerland           CH  Data Scientist                 Roche   \n",
       "3      Basel  Switzerland           CH  Data Scientist                Google   \n",
       "4      Basel  Switzerland           CH  Data Scientist                 Roche   \n",
       "5        Zug  Switzerland           CH  Data Scientist                Google   \n",
       "...      ...          ...          ...             ...                   ...   \n",
       "5570  Kanpur        India           IN  Data Scientist               Dream11   \n",
       "5571  Kanpur        India           IN  Data Scientist                Amazon   \n",
       "5572  Kanpur        India           IN  Data Scientist                 IQVIA   \n",
       "5573  Kanpur        India           IN  Data Scientist  Fidelity Investments   \n",
       "5574  Kanpur        India           IN  Data Scientist             Accenture   \n",
       "\n",
       "      totalyearlycompensation  salary_to_cost_perc  salary_to_rent_perc  \\\n",
       "1                    345000.0                26.25                20.78   \n",
       "2                     94000.0                26.25                20.78   \n",
       "3                    345000.0                26.19                14.81   \n",
       "4                     94000.0                26.19                14.81   \n",
       "5                    345000.0                25.63                21.64   \n",
       "...                       ...                  ...                  ...   \n",
       "5570                 280000.0                 4.16                 1.08   \n",
       "5571                 133000.0                 4.16                 1.08   \n",
       "5572                  21000.0                 4.16                 1.08   \n",
       "5573                  26000.0                 4.16                 1.08   \n",
       "5574                  20000.0                 4.16                 1.08   \n",
       "\n",
       "      salary_to_groceries_perc  salary_to_purchase_power_perc  \\\n",
       "1                        20.42                          12.98   \n",
       "2                        20.42                          12.98   \n",
       "3                        20.56                          11.15   \n",
       "4                        20.56                          11.15   \n",
       "5                        19.89                          14.34   \n",
       "...                        ...                            ...   \n",
       "5570                      3.33                           3.88   \n",
       "5571                      3.33                           3.88   \n",
       "5572                      3.33                           3.88   \n",
       "5573                      3.33                           3.88   \n",
       "5574                      3.33                           3.88   \n",
       "\n",
       "      salary_to_restaurant_perc  \n",
       "1                         13.25  \n",
       "2                         13.25  \n",
       "3                         13.10  \n",
       "4                         13.10  \n",
       "5                         13.09  \n",
       "...                         ...  \n",
       "5570                       1.33  \n",
       "5571                       1.33  \n",
       "5572                       1.33  \n",
       "5573                       1.33  \n",
       "5574                       1.33  \n",
       "\n",
       "[3165 rows x 11 columns]"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salary_to_spendings_perc_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "id": "83599498-63ba-4035-9585-4c4a9558f00f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#salary_to_spendings_perc_df.to_csv('salary_to_spendings_perc_df.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "id": "9c8dc63f-2c64-4079-b857-d7a0f4b3b203",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 385,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salary_to_spendings_perc_df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "id": "2437ebd6-15d9-45f3-aa72-0eadb9e403b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Sort the DataFrame based on each percentage column in ascending order\n",
    "### if we sort the dataframe in ascending order(default)\n",
    "### we will have the lowest percentage is on the top.\n",
    "### We need the lowest percentages because lowest percentages mean \n",
    "### that we spend that percent of our salary for the rent or grocery or restaurant etc...\n",
    "\n",
    "sorted_df = salary_to_spendings_perc_df.sort_values(by=[\n",
    "    'salary_to_cost_perc',\n",
    "    'salary_to_rent_perc',\n",
    "    'salary_to_groceries_perc',\n",
    "    'salary_to_purchase_power_perc',\n",
    "    'salary_to_restaurant_perc'\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "id": "37ed47dc-6d2e-4545-b568-5a0c7f6e3968",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Alpha-2 code</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>totalyearlycompensation</th>\n",
       "      <th>salary_to_cost_perc</th>\n",
       "      <th>salary_to_rent_perc</th>\n",
       "      <th>salary_to_groceries_perc</th>\n",
       "      <th>salary_to_purchase_power_perc</th>\n",
       "      <th>salary_to_restaurant_perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5521</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Amazon</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5522</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Capgemini</td>\n",
       "      <td>10000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5523</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Verizon</td>\n",
       "      <td>32000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5524</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Societe Generale</td>\n",
       "      <td>26000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5525</th>\n",
       "      <td>Kanpur</td>\n",
       "      <td>India</td>\n",
       "      <td>IN</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Fractal Analytics</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.33</td>\n",
       "      <td>3.88</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Zug</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>25.63</td>\n",
       "      <td>21.64</td>\n",
       "      <td>19.89</td>\n",
       "      <td>14.34</td>\n",
       "      <td>13.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>26.19</td>\n",
       "      <td>14.81</td>\n",
       "      <td>20.56</td>\n",
       "      <td>11.15</td>\n",
       "      <td>13.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Basel</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>26.19</td>\n",
       "      <td>14.81</td>\n",
       "      <td>20.56</td>\n",
       "      <td>11.15</td>\n",
       "      <td>13.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Google</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>26.25</td>\n",
       "      <td>20.78</td>\n",
       "      <td>20.42</td>\n",
       "      <td>12.98</td>\n",
       "      <td>13.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Zurich</td>\n",
       "      <td>Switzerland</td>\n",
       "      <td>CH</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>Roche</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>26.25</td>\n",
       "      <td>20.78</td>\n",
       "      <td>20.42</td>\n",
       "      <td>12.98</td>\n",
       "      <td>13.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3165 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        City      Country Alpha-2 code           title            company  \\\n",
       "5521  Kanpur        India           IN  Data Scientist             Amazon   \n",
       "5522  Kanpur        India           IN  Data Scientist          Capgemini   \n",
       "5523  Kanpur        India           IN  Data Scientist            Verizon   \n",
       "5524  Kanpur        India           IN  Data Scientist   Societe Generale   \n",
       "5525  Kanpur        India           IN  Data Scientist  Fractal Analytics   \n",
       "...      ...          ...          ...             ...                ...   \n",
       "6        Zug  Switzerland           CH  Data Scientist              Roche   \n",
       "3      Basel  Switzerland           CH  Data Scientist             Google   \n",
       "4      Basel  Switzerland           CH  Data Scientist              Roche   \n",
       "1     Zurich  Switzerland           CH  Data Scientist             Google   \n",
       "2     Zurich  Switzerland           CH  Data Scientist              Roche   \n",
       "\n",
       "      totalyearlycompensation  salary_to_cost_perc  salary_to_rent_perc  \\\n",
       "5521                  40000.0                 4.16                 1.08   \n",
       "5522                  10000.0                 4.16                 1.08   \n",
       "5523                  32000.0                 4.16                 1.08   \n",
       "5524                  26000.0                 4.16                 1.08   \n",
       "5525                  85000.0                 4.16                 1.08   \n",
       "...                       ...                  ...                  ...   \n",
       "6                     94000.0                25.63                21.64   \n",
       "3                    345000.0                26.19                14.81   \n",
       "4                     94000.0                26.19                14.81   \n",
       "1                    345000.0                26.25                20.78   \n",
       "2                     94000.0                26.25                20.78   \n",
       "\n",
       "      salary_to_groceries_perc  salary_to_purchase_power_perc  \\\n",
       "5521                      3.33                           3.88   \n",
       "5522                      3.33                           3.88   \n",
       "5523                      3.33                           3.88   \n",
       "5524                      3.33                           3.88   \n",
       "5525                      3.33                           3.88   \n",
       "...                        ...                            ...   \n",
       "6                        19.89                          14.34   \n",
       "3                        20.56                          11.15   \n",
       "4                        20.56                          11.15   \n",
       "1                        20.42                          12.98   \n",
       "2                        20.42                          12.98   \n",
       "\n",
       "      salary_to_restaurant_perc  \n",
       "5521                       1.33  \n",
       "5522                       1.33  \n",
       "5523                       1.33  \n",
       "5524                       1.33  \n",
       "5525                       1.33  \n",
       "...                         ...  \n",
       "6                         13.09  \n",
       "3                         13.10  \n",
       "4                         13.10  \n",
       "1                         13.25  \n",
       "2                         13.25  \n",
       "\n",
       "[3165 rows x 11 columns]"
      ]
     },
     "execution_count": 389,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "id": "5f7783fb-47ec-4337-82d0-2b60f1995ed0",
   "metadata": {},
   "outputs": [],
   "source": [
    "### group by country and sort it. \n",
    "\n",
    "cost_perc_sorted = salary_to_spendings_perc_df.groupby('Country')['salary_to_cost_perc'].mean().round(2).sort_values()\n",
    "rent_perc_sorted = salary_to_spendings_perc_df.groupby('Country')['salary_to_rent_perc'].mean().round(2).sort_values()\n",
    "groceries_perc_sorted = salary_to_spendings_perc_df.groupby('Country')['salary_to_groceries_perc'].mean().round(2).sort_values()\n",
    "purchase_power_perc_sorted = salary_to_spendings_perc_df.groupby('Country')['salary_to_purchase_power_perc'].mean().round(2).sort_values()\n",
    "restaurent_perc_sorted = salary_to_spendings_perc_df.groupby('Country')['salary_to_restaurant_perc'].mean().round(2).sort_values()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 414,
   "id": "0b41ee4b-72ca-463a-ad25-2635899bd420",
   "metadata": {},
   "outputs": [],
   "source": [
    "### I added a column name to sorted values.\n",
    "\n",
    "cost_perc_sorted = cost_perc_sorted.reset_index(name='cost_perc')\n",
    "rent_perc_sorted = rent_perc_sorted.reset_index(name='rent_perc')\n",
    "groceries_perc_sorted = groceries_perc_sorted.reset_index(name='groceries_perc')\n",
    "purchase_power_perc_sorted = purchase_power_perc_sorted.reset_index(name='purchase_power_perc')\n",
    "restaurent_perc_sorted = restaurent_perc_sorted.reset_index(name='restaurant_perc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "id": "68cbb9c2-27e0-4b1e-bd66-060db0df2bac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>cost_perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>India</td>\n",
       "      <td>5.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>6.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Poland</td>\n",
       "      <td>8.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>China</td>\n",
       "      <td>9.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Germany</td>\n",
       "      <td>13.46</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Country  cost_perc\n",
       "0    India       5.08\n",
       "1  Ukraine       6.22\n",
       "2   Poland       8.14\n",
       "3    China       9.42\n",
       "4  Germany      13.46"
      ]
     },
     "execution_count": 428,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### since I need only the top, I will use the .head(5)\n",
    "cost_perc_sorted.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "id": "2a651bc9-0a6b-4aec-b575-6c1593c71d20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>rent_perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>India</td>\n",
       "      <td>1.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>3.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Poland</td>\n",
       "      <td>4.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>China</td>\n",
       "      <td>7.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Germany</td>\n",
       "      <td>8.68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Country  rent_perc\n",
       "0    India       1.73\n",
       "1  Ukraine       3.68\n",
       "2   Poland       4.84\n",
       "3    China       7.47\n",
       "4  Germany       8.68"
      ]
     },
     "execution_count": 430,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rent_perc_sorted.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "id": "767d5814-243d-45ab-b2a9-f7dd840d7e2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>groceries_perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>3.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>India</td>\n",
       "      <td>4.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Poland</td>\n",
       "      <td>5.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>China</td>\n",
       "      <td>7.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Germany</td>\n",
       "      <td>7.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Country  groceries_perc\n",
       "0  Ukraine            3.98\n",
       "1    India            4.10\n",
       "2   Poland            5.01\n",
       "3    China            7.66\n",
       "4  Germany            7.94"
      ]
     },
     "execution_count": 432,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "groceries_perc_sorted.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "id": "54a487ac-8e98-4851-8863-b24beb6ff542",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>purchase_power_perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>3.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>India</td>\n",
       "      <td>4.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Poland</td>\n",
       "      <td>5.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>China</td>\n",
       "      <td>6.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Japan</td>\n",
       "      <td>7.59</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Country  purchase_power_perc\n",
       "0  Ukraine                 3.72\n",
       "1    India                 4.95\n",
       "2   Poland                 5.99\n",
       "3    China                 6.22\n",
       "4    Japan                 7.59"
      ]
     },
     "execution_count": 434,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "purchase_power_perc_sorted.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "92664f58-d8e6-4e40-b124-0f2898f0f98f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>restaurant_perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>India</td>\n",
       "      <td>1.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>2.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>China</td>\n",
       "      <td>3.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Poland</td>\n",
       "      <td>3.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Japan</td>\n",
       "      <td>4.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Country  restaurant_perc\n",
       "0    India             1.86\n",
       "1  Ukraine             2.67\n",
       "2    China             3.39\n",
       "3   Poland             3.51\n",
       "4    Japan             4.57"
      ]
     },
     "execution_count": 436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "restaurent_perc_sorted.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 471,
   "id": "677b031e-4923-4c46-a1dd-3d00608c4e48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Now we can graph it simply for the cost of living.\n",
    "### The smallest the percentage is the better place to live \n",
    "### based on the salary amount and the spending\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "### first we need to write the column names on plt.bar as values.\n",
    "colors = ['red', 'green', 'blue', 'orange', 'purple']\n",
    "\n",
    "plt.bar(cost_perc_sorted['Country'][:5],cost_perc_sorted['cost_perc'][:5], color = colors)\n",
    "plt.xticks(rotation=45)\n",
    "plt.xlabel('Country')\n",
    "plt.ylabel('Cost of Living Percentage')\n",
    "plt.title('Top 5 Countries for Cost of Living-to-Salary ')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "id": "d2d65293-dd5f-43ac-af15-1a9c6ca62b24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Now we can graph it simply for the rent.\n",
    "### The smallest the percentage is the better place to live \n",
    "### based on the salary amount and the spending\n",
    "\n",
    "### First we need to write the column names on plt.bar as values.\n",
    "colors = ['red', 'green', 'blue', 'orange', 'purple']\n",
    "\n",
    "plt.bar(rent_perc_sorted['Country'][:5],rent_perc_sorted['rent_perc'][:5], color = colors)\n",
    "plt.xticks(rotation=45)\n",
    "plt.xlabel('Country')\n",
    "plt.ylabel('Rent Percentage')\n",
    "plt.title('Top 5 Countries for Rent-to-Salary Percent')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "id": "93bd5270-5184-4c4f-9fab-d66b30fdfbbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colors = ['red', 'green', 'blue', 'orange', 'purple']\n",
    "\n",
    "plt.bar(groceries_perc_sorted['Country'][:5],groceries_perc_sorted['groceries_perc'][:5], color = colors)\n",
    "plt.xticks(rotation=45)\n",
    "plt.xlabel('Country')\n",
    "plt.ylabel('Groceries Percentage')\n",
    "plt.title('Top 5 Countries for Groceries-to-Salary Percent')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "id": "5347d359-c91b-4d7a-a8d9-b6494683ea53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colors = ['red', 'green', 'blue', 'orange', 'purple']\n",
    "\n",
    "plt.bar(restaurent_perc_sorted['Country'][:5],restaurent_perc_sorted['restaurant_perc'][:5], color = colors)\n",
    "plt.xticks(rotation=45)\n",
    "plt.xlabel('Country')\n",
    "plt.ylabel('Restaurant Percentage')\n",
    "plt.title('Top 5 Countries for Restaurant-to-Salary Percent')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "id": "8eda88d5-11da-4809-b0ab-77ae2499cb5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colors = ['red', 'green', 'blue', 'orange', 'purple']\n",
    "\n",
    "plt.bar(purchase_power_perc_sorted['Country'][:5],purchase_power_perc_sorted['purchase_power_perc'][:5], color = colors)\n",
    "plt.xticks(rotation=45)\n",
    "plt.xlabel('Country')\n",
    "plt.ylabel('Purchasing Power Percentage')\n",
    "plt.title('Top 5 Countries for Purchasing Power-to-Salary Percent')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbaf2fda-f9e1-4616-b681-e58075c0f813",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
